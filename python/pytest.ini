[pytest]
# Test discovery and execution patterns
testpaths = tests
pythonpath = .
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Async support
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function
asyncio_default_test_loop_scope = function

# Performance optimizations
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --disable-warnings
    # Stop on first failure in CI environments
    --maxfail=1
    # Optimize imports and reduce startup time
    --import-mode=importlib
    # Performance profiling
    --durations=10

# Test markers for selective execution
markers =
    unit: marks tests as unit tests (fast, isolated)
    integration: marks tests as integration tests (slower, requires services)
    slow: marks tests as slow running (>5 seconds)
    asyncio: marks tests as asyncio tests
    repository: marks tests that use repository patterns
    api: marks tests for API endpoints
    service: marks tests for service layer
    database: marks tests requiring database access
    mock: marks tests that use mocking extensively
    smoke: marks tests for basic functionality verification

# Test timeout configuration
timeout = 300
timeout_method = thread

# Logging configuration for tests
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Filter warnings to reduce noise
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:supabase.*
    ignore::UserWarning:httpx.*
    ignore::UserWarning:asyncio.*

# Test collection optimization
collect_ignore = 
    build
    dist
    *.egg-info
    node_modules
    __pycache__
    .pytest_cache
    .venv
    venv

# Minimum version requirements
minversion = 8.0 