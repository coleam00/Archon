name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

    services:
      postgres:
        # Use Supabase's Postgres image which includes common extensions (vector,
        # pg_trgm, etc.) and the 'auth' schema/roles used by migrations.
        image: supabase/postgres:15.3.0
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d postgres"
          --health-interval 10s --health-timeout 5s --health-retries 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install system packages (postgres client)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Install Python dependencies (uv)
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv
          uv sync --group all
        working-directory: ./python

      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./archon-ui-main

      - name: Wait for Postgres to become available
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          # Increase retries and also validate a psql connection so migration errors
          # are clearer when Postgres isn't reachable.
          for i in {1..60}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres && echo "pg_isready ok" && break
            echo "Waiting for Postgres... ($i)"
            sleep 2
          done

          echo "Testing psql connection (this will error if DB isn't ready)"
          psql -h 127.0.0.1 -p 5432 -U postgres -c '\l' || {
            echo "psql test failed; show pg_isready output:";
            pg_isready -h 127.0.0.1 -p 5432 -U postgres -d postgres || true;
            exit 1;
          }

          # Supabase images initialize extra roles/schemas (auth, authenticated,
          # service_role) asynchronously. Wait until the 'auth' schema exists so
          # migrations that rely on it can run without failing.
          for i in {1..30}; do
            psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c "SELECT schema_name FROM information_schema.schemata WHERE schema_name='auth';" | grep -q auth && echo "supabase auth schema ready" && break
            echo "Waiting for Supabase schema 'auth'... ($i)"
            sleep 2
          done

          # Wait for the 'vector' extension to be available. Many migrations
          # depend on the 'vector' type and operators; if the extension isn't
          # installed the SQL will fail with confusing errors. Fail early with a
          # clear message so CI is easier to diagnose.
          for i in {1..30}; do
            psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -tAc "SELECT 1 FROM pg_extension WHERE extname='vector';" | grep -q 1 && echo "vector extension available" && break
            echo "Waiting for 'vector' extension to be installed... ($i)"
            sleep 2
          done

          # Final explicit check so we error out with a helpful message instead of
          # letting downstream migrations produce opaque PostgreSQL errors.
          psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -tAc "SELECT 1 FROM pg_extension WHERE extname='vector';" | grep -q 1 || {
            echo "ERROR: required extension 'vector' not found in Postgres."
            echo "Use a Supabase Postgres image that ships the vector extension,"
            echo "or install the extension in your CI image before running migrations.";
            echo "For local debugging, run: psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c \"CREATE EXTENSION IF NOT EXISTS vector;\"";
            exit 1;
          }

      - name: Run DB migrations
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        # ensure we run from the repository root and surface helpful debug info if the
        # migration wrapper is missing in the checked-out commit
        working-directory: ./
        run: |
          echo "Debug: working dir = $(pwd)"
          echo "Debug: list repo root:"; ls -la
          echo "Debug: list scripts dir (if present):"; ls -la scripts || true
          bash ./scripts/run_migrations.sh 127.0.0.1 5432 postgres "$PGPASSWORD" postgres

      - name: Run backend tests
        run: |
          uv run pytest -q
        working-directory: ./python

      - name: Run frontend tests
        run: |
          # Use the repository's vitest run script. Avoid unsupported jest flags like --runInBand.
          npm run test:run
        working-directory: ./archon-ui-main